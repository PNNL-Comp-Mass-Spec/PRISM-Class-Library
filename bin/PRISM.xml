<?xml version="1.0"?>
<doc>
<assembly>
<name>
PRISM
</name>
</assembly>
<members>
<member name="F:PRISM.Logging.ILogger.logMsgType.logNormal">
	<summary>The message is informational.</summary>
</member><member name="F:PRISM.Logging.ILogger.logMsgType.logError">
	<summary>The message represents an error.</summary>
</member><member name="F:PRISM.Logging.ILogger.logMsgType.logWarning">
	<summary>The message represents a warning.</summary>
</member><member name="F:PRISM.Logging.ILogger.logMsgType.logDebug">
	<summary>The message is only for debugging purposes.</summary>
</member><member name="F:PRISM.Logging.ILogger.logMsgType.logNA">
	<summary>The mesaage does not apply (to what?).</summary>
</member><member name="F:PRISM.Logging.ILogger.logMsgType.logHealth">
	<summary>The message is an indicator of (in)correct operation.</summary>
</member><member name="T:PRISM.Logging.ILogger.logMsgType">
	<summary>The type of log message.</summary>
</member><member name="M:PRISM.Logging.ILogger.PostEntry(System.String,PRISM.Logging.ILogger.logMsgType,System.Boolean)">
	<summary>Posts a message to the log.</summary>
	<param name="message">The message to post.</param>
	<param name="EntryType">The ILogger error type.</param>
	<param name="localOnly">Post message locally only.</param>
</member><member name="M:PRISM.Logging.ILogger.PostError(System.String,System.Exception,System.Boolean)">
	<summary>Posts an error to the log.</summary>
	<param name="message">The message to post.</param>
	<param name="e">The exception associated with the error.</param>
	<param name="localOnly">Post message locally only.</param>
</member><member name="T:PRISM.Logging.ILogger">
	<summary>Defines the logging interface.</summary>
</member><member name="M:PRISM.Logging.ILoggerAware.RegisterExceptionLogger(PRISM.Logging.ILogger)">
	<summary>Register an ILogger with a class to have it log any exception that might occur.</summary>
	<param name="logger">A logger object to be used when logging is desired.</param>
</member><member name="M:PRISM.Logging.ILoggerAware.RegisterEventLogger(PRISM.Logging.ILogger)">
	<summary>Register an ILogger with a class to have it log any event that might occur.</summary>
	<param name="logger">A logger object to be used when logging is desired.</param>
</member><member name="P:PRISM.Logging.ILoggerAware.NotifyOnEvent">
	<summary>Set true and the class will raise events.  Set false and it will not.</summary>
	<remarks>A function like the one shown below can be placed in ILoggerAware class that will only raise the event in the
 event of one needing to be raised.
 </remarks>
</member><member name="P:PRISM.Logging.ILoggerAware.NotifyOnException">
	<summary>Set true and the class will throw exceptions.  Set false and it will not</summary>
	<remarks>A function like this can be place in ILoggerAware class that will only throw an exception in the
 event of one needing to be thrown.
 </remarks>
</member><member name="T:PRISM.Logging.ILoggerAware">
	<summary>Defines the logging aware interface.</summary>
	<remarks>This interface is used by any class that wants to optionally support 
 logging to a logger that implements the ILogger interface.  The key
 here is the phrase optionally.  The class allows, but does not
 require the class user to supply an ILogger.  If the Logger is not
 specified, the class throw Exceptions and raises Events in the usual
 way.  If an ILogger is specified, the user has the option of just logging,
 or logging and throwing/raising Exceptions/Events in the usual way as well.
 </remarks>
</member><member name="M:PRISM.Logging.clsFileLogger.#ctor">
	<summary>Initializes a new instance of the clsFileLogger class.</summary>
</member><member name="M:PRISM.Logging.clsFileLogger.#ctor(System.String)">
	<summary>Initializes a new instance of the clsFileLogger class which logs to the specified file.</summary>
	<param name="filePath">The name of the file to use for the log.</param>
	<remarks>The actual log file name changes daily and is of the form "filePath_mm-dd-yyyy.txt".</remarks>
</member><member name="P:PRISM.Logging.clsFileLogger.LogExecutableName">
	<summary> Set to true to have the executable's name entered in the log.</summary>
</member><member name="P:PRISM.Logging.clsFileLogger.LogExecutableVersion">
	<summary> Set to true to have the executable's version entered in the log.</summary>
</member><member name="P:PRISM.Logging.clsFileLogger.ExecutableVersion">
	<summary>Gets the product version associated with this application.</summary>
</member><member name="P:PRISM.Logging.clsFileLogger.ExecutableName">
	<summary>Gets the name of the executable file that started the application.</summary>
</member><member name="P:PRISM.Logging.clsFileLogger.LogFilePath">
	<summary>The name of the file being used as the log.</summary>
	<remarks>The actual log file name changes daily and is of the form "filePath_mm-dd-yyyy.txt".</remarks>
</member><member name="M:PRISM.Logging.clsFileLogger.LogToFile(System.String,PRISM.Logging.ILogger.logMsgType)">
	<summary>Writes a message to the log file.</summary>
	<param name="message">The message to post.</param>
	<param name="EntryType">The ILogger error type.</param>
</member><member name="M:PRISM.Logging.clsFileLogger.TypeToString(PRISM.Logging.ILogger.logMsgType)">
	<summary>Converts enumerated error type to string for logging output.</summary>
	<param name="MyErrType">The ILogger error type.</param>
</member><member name="M:PRISM.Logging.clsFileLogger.PostEntry(System.String,PRISM.Logging.ILogger.logMsgType,System.Boolean)">
	<summary>Posts a message to the log.</summary>
	<param name="message">The message to post.</param>
	<param name="EntryType">The ILogger error type.</param>
	<param name="localOnly">Post message locally only.</param>
</member><member name="M:PRISM.Logging.clsFileLogger.PostError(System.String,System.Exception,System.Boolean)">
	<summary>Posts an error to the log.</summary>
	<param name="message">The message to post.</param>
	<param name="ex">The exception associated with the error.</param>
	<param name="localOnly">Post message locally only.</param>
</member><member name="T:PRISM.Logging.clsFileLogger">
	<summary>Provides logging to a local file.</summary>
	<remarks>The actual log file name changes daily and is of the form "filePath_mm-dd-yyyy.txt".</remarks>
</member><member name="M:PRISM.Logging.clsDBLogger.#ctor">
	<summary>Initializes a new instance of the clsDBLogger class.</summary>
</member><member name="M:PRISM.Logging.clsDBLogger.#ctor(System.String)">
	<summary>Initializes a new instance of the clsDBLogger class which logs to the specified database.</summary>
	<param name="connectionStr">The connection string used to access the database.</param>
</member><member name="M:PRISM.Logging.clsDBLogger.#ctor(System.String,System.String)">
	<summary>Initializes a new instance of the clsDBLogger class which logs to the specified database and file.</summary>
	<param name="connectionStr">The connection string used to access the database.</param>
	<param name="filePath">The name of the file to use for the log.</param>
</member><member name="M:PRISM.Logging.clsDBLogger.#ctor(System.String,System.String,System.String)">
	<summary>Initializes a new instance of the clsDBLogger class which logs to the specified database and file.</summary>
	<param name="modName">The string used to identify the posting process.</param>
	<param name="connectionStr">The connection string used to access the database.</param>
	<param name="filePath">The name of the file to use for the log.</param>
	<remarks>The module name identifies the logging process, but if not specified, it is filled in as
 ExecutableName:ExecutableVersion:MachineName:UserName.</remarks>
</member><member name="P:PRISM.Logging.clsDBLogger.LogExecutableName">
	<summary> Set to true to have the executable's name entered in the log.</summary>
</member><member name="P:PRISM.Logging.clsDBLogger.LogExecutableVersion">
	<summary> Set to true to have the executable's version entered in the log.</summary>
</member><member name="P:PRISM.Logging.clsDBLogger.ConnectionString">
	<summary>The connection string used to access the database.</summary>
</member><member name="P:PRISM.Logging.clsDBLogger.MachineName">
	<summary>The module name identifies the logging process.</summary>
</member><member name="P:PRISM.Logging.clsDBLogger.UserName">
	<summary>The module name identifies the logging process.</summary>
</member><member name="M:PRISM.Logging.clsDBLogger.ConstructModuleName">
	<summary>COnstruct the string ExecutableName:ExecutableVersion:MachineName:UserName.</summary>
</member><member name="P:PRISM.Logging.clsDBLogger.ModuleName">
	<summary>The module name identifies the logging process.</summary>
	<remarks>If the module name is not specified, it is filled in as
 ExecutableName:ExecutableVersion:MachineName:UserName.</remarks>
</member><member name="M:PRISM.Logging.clsDBLogger.LogToDB(System.String,PRISM.Logging.ILogger.logMsgType)">
	<summary>Writes a message to the log table.</summary>
	<param name="message">The message to post.</param>
	<param name="EntryType">The ILogger error type.</param>
</member><member name="M:PRISM.Logging.clsDBLogger.PostEntry(System.String,PRISM.Logging.ILogger.logMsgType,System.Boolean)">
	<summary>Posts a message to the log.</summary>
	<param name="message">The message to post.</param>
	<param name="EntryType">The ILogger error type.</param>
	<param name="localOnly">Post message locally only.</param>
</member><member name="M:PRISM.Logging.clsDBLogger.PostError(System.String,System.Exception,System.Boolean)">
	<summary>Posts an error to the log.</summary>
	<param name="message">The message to post.</param>
	<param name="e">The exception associated with the error.</param>
	<param name="localOnly">Post message locally only.</param>
</member><member name="M:PRISM.Logging.clsDBLogger.PostLogEntry(System.String,System.String)">
	<summary>Writes a message to the log table via the stored procedure.</summary>
	<param name="type">The ILogger error type.</param>
	<param name="message">The message to post.</param>
</member><member name="M:PRISM.Logging.clsDBLogger.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
	<summary>Event handler for InfoMessage event.</summary>
	<remarks>Errors and warnings sent from the SQL Server database engine are caught here.</remarks>
</member><member name="T:PRISM.Logging.clsDBLogger">
	<summary>Provides logging to a database and local file.</summary>
	<remarks>The module name identifies the logging process, but if not specified, it is filled in as
 ExecutableName:ExecutableVersion:MachineName:UserName.</remarks>
</member><member name="T:PRISM.Logging.clsQueLogger.clsLogEntry">
	<summary>A class to hold a log entry in the internal queue.</summary>
	<remarks>It holds the three arguments to PostEntry.</remarks>
</member><member name="M:PRISM.Logging.clsQueLogger.#ctor(PRISM.Logging.ILogger)">
	<summary>Initializes a new instance of the clsQueLogger class which logs to the ILogger.</summary>
	<param name="logger">The target logger object.</param>
</member><member name="M:PRISM.Logging.clsQueLogger.KickTheOutputThread">
	<summary>Start the log output thread if it isn't already running.</summary>
</member><member name="M:PRISM.Logging.clsQueLogger.LogFromQueue">
	<summary>Pull all entries from the queue and output them to the log streams.</summary>
</member><member name="M:PRISM.Logging.clsQueLogger.PostEntry(System.String,PRISM.Logging.ILogger.logMsgType,System.Boolean)">
	<summary>Writes a message to the log.</summary>
	<param name="message">The message to post.</param>
	<param name="EntryType">The ILogger error type.</param>
</member><member name="M:PRISM.Logging.clsQueLogger.PostError(System.String,System.Exception,System.Boolean)">
	<summary>Posts a message to the log.</summary>
	<param name="message">The message to post.</param>
	<param name="e">The exception associated with the error.</param>
	<param name="localOnly">Post message locally only.</param>
</member><member name="T:PRISM.Logging.clsQueLogger">
	<summary>Wraps a queuing mechanism around any object that implements ILogger interface.</summary>
	<remarks>The posting member functions of this class put the log entry
 onto the end of an internal queue and return very quickly to the caller.
 A separate thread within the class is used to perform the actual output of
 the log entries using the logging object that is specified
 in the constructor for this class.</remarks>
</member><member name="M:PRISM.Logging.clsControlLogger.#ctor(System.Windows.Forms.ListBox)">
	<summary>Initializes a new instance of the clsFileLogger class which logs to a listbox.</summary>
	<param name="lsBox">The name of the listbox used to log message.</param>
</member><member name="M:PRISM.Logging.clsControlLogger.#ctor(System.Windows.Forms.ListView)">
	<summary>Initializes a new instance of the clsFileLogger class which logs to a listview.</summary>
	<param name="lsView">The name of the listview used to log message.</param>
</member><member name="M:PRISM.Logging.clsControlLogger.#ctor(System.Windows.Forms.TextBoxBase)">
	<summary>Initializes a new instance of the clsFileLogger class which logs to a textbox.</summary>
	<param name="txtBox">The name of the textbox used to log message.</param>
</member><member name="P:PRISM.Logging.clsControlLogger.ExecutableVersion">
	<summary>Gets the product version associated with this application.</summary>
</member><member name="P:PRISM.Logging.clsControlLogger.ExecutableName">
	<summary>Gets the name of the executable file that started the application.</summary>
</member><member name="P:PRISM.Logging.clsControlLogger.LogListBox">
	<summary>Gets and Sets the name of the listbox control.</summary>
</member><member name="P:PRISM.Logging.clsControlLogger.LogListView">
	<summary>Gets and Sets the name of the listview control.</summary>
</member><member name="P:PRISM.Logging.clsControlLogger.LogTextBoxBase">
	<summary>Gets and Sets the name of the TextBoxBase control.</summary>
</member><member name="M:PRISM.Logging.clsControlLogger.LogToControl(System.String,PRISM.Logging.ILogger.logMsgType)">
	<summary>Posts a message.</summary>
	<param name="message">The message to post.</param>
	<param name="EntryType">The ILogger error type.</param>
</member><member name="M:PRISM.Logging.clsControlLogger.PostEntryTextBox(System.String)">
	<summary>Posts a message to the textbox control.</summary>
	<param name="message">The message to post.</param>
</member><member name="M:PRISM.Logging.clsControlLogger.PostEntryListBox(System.String)">
	<summary>Posts a message to the listbox control.</summary>
	<param name="message">The message to post.</param>
</member><member name="M:PRISM.Logging.clsControlLogger.PostEntryListview(System.String,PRISM.Logging.ILogger.logMsgType)">
	<summary>Posts a message to the listview control.</summary>
	<param name="message">The message to post.</param>
	<param name="EntryType">The ILogger error type.</param>
</member><member name="M:PRISM.Logging.clsControlLogger.TypeToString(PRISM.Logging.ILogger.logMsgType)">
	<summary>Converts enumerated error type to string for logging output.</summary>
	<param name="MyErrType">The ILogger error type.</param>
</member><member name="M:PRISM.Logging.clsControlLogger.PostEntry(System.String,PRISM.Logging.ILogger.logMsgType,System.Boolean)">
	<summary>Posts a message to the log.</summary>
	<param name="message">The message to post.</param>
	<param name="EntryType">The ILogger error type.</param>
	<param name="localOnly">Post message locally only.</param>
</member><member name="M:PRISM.Logging.clsControlLogger.PostError(System.String,System.Exception,System.Boolean)">
	<summary>Posts an error to the log.</summary>
	<param name="message">The message to post.</param>
	<param name="ex">The exception associated with the error.</param>
	<param name="localOnly">Post message locally only.</param>
</member><member name="T:PRISM.Logging.clsControlLogger">
	<summary>Provides logging to a control.</summary>
	<remarks>The actual log control can be a textbox, listbox and a listview.</remarks>
</member><member name="M:PRISM.DataBase.clsDBTools.#ctor(PRISM.Logging.ILogger,System.String)">
	<summary>Initializes a new instance of the clsDBTools class which logs to the specified logger.</summary>
	<param name="logger">This is the logger.</param>
	<param name="ConnectStr">This is a connection string.</param>
</member><member name="P:PRISM.DataBase.clsDBTools.ConnectStr">
	<summary>
 The property sets and gets a connection string.
 </summary>
</member><member name="M:PRISM.DataBase.clsDBTools.OpenConnection">
	<summary>
 The function opens a database connection.
 </summary>
	<return>The function returns a boolean that shows if the connection was opened.</return>
</member><member name="M:PRISM.DataBase.clsDBTools.CLoseConnection">
	<summary>
 The subroutine closes the database connection.
 </summary>
</member><member name="M:PRISM.DataBase.clsDBTools.LogErrorEvents">
	<summary>
 The subroutine logs the error events.
 </summary>
</member><member name="M:PRISM.DataBase.clsDBTools.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
	<summary>
 The subroutine is an event handeler for InfoMessage event.
 </summary>
	<remarks>
 The errors and warnings sent from the SQL server are caught here
 </remarks>
</member><member name="M:PRISM.DataBase.clsDBTools.GetDiscDataSet(System.String,System.Data.DataSet@,System.Int32@)">
	<summary>
 The function gets a disconnected dataset as specified by the SQL statement.
 </summary>
	<param name="SQL">A SQL string.</param>
	<param name="DS">A dataset.</param>
	<param name="RowCount">A row counter.</param>
	<return>Returns a disconnected dataset as specified by the SQL statement.</return>
</member><member name="M:PRISM.DataBase.clsDBTools.UpdateDatabase(System.String,System.Int32@)">
	<summary>
 The function updates a database table as specified in the SQL statement.
 </summary>
	<param name="SQL">A SQL string.</param>
	<param name="AffectedRows">Affected Rows to be updated.</param>
	<return>Returns Boolean shwoing if the database was updated.</return>
</member><member name="T:PRISM.DataBase.clsDBTools">
	<summary>Tools to manipulates the database.</summary>
</member><member name="T:PRISM.Processes.clsProgRunner.States">
	<summary>
 clsProgRunner states
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_ExceptionLogger">
	<summary>
 Interface used for logging exceptions.
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_EventLogger">
	<summary>
 Interface used for logging errors and health related messages.
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_NotifyOnException">
	<summary>
 True for logging behavior, else false.
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_NotifyOnEvent">
	<summary>
 True for logging behavior, else false.
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_Process">
	<summary>
 Used to start and monitor the external program.
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_pid">
	<summary>
 The process id of the currently running incarnation of the external program.
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_Thread">
	<summary>
 The internal thread used to run the monitoring code.
 </summary>
	<remarks>
 That starts and monitors the external program
 </remarks>
</member><member name="F:PRISM.Processes.clsProgRunner.m_doCleanup">
	<summary>
 Flag that tells internal thread to quit monitoring external program and exit.
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_monitorInterval">
	<summary>
 The interval for monitoring thread to wake up and check m_doCleanup.
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_ExitCode">
	<summary>
 Exit code returned by completed process.
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_name">
	<summary>
 Parameters for external program.
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_CachedConsoleOutput">
	<summary>
 Caches the text written to the Console by the external program
 </summary>
</member><member name="F:PRISM.Processes.clsProgRunner.m_CachedConsoleError">
	<summary>
 Caches the text written to the Error buffer by the external program
 </summary>
</member><member name="E:PRISM.Processes.clsProgRunner.ProgChanged">
	<summary>
 This event is raised whenever the state property changes.
 </summary>
</member><member name="E:PRISM.Processes.clsProgRunner.ConsoleOutputEvent">
	<summary>
 This event is raised when the external program writes text to the console
 </summary>
	<param name="NewText"></param>
	<remarks></remarks>
</member><member name="E:PRISM.Processes.clsProgRunner.ConsoleErrorEvent">
	<summary>
 This event is raised when the external program writes text to the console's error stream
 </summary>
	<param name="NewText"></param>
	<remarks></remarks>
</member><member name="P:PRISM.Processes.clsProgRunner.Arguments">
	<summary>
 Arguments supplied to external program when it is run.
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.CachedConsoleOutput">
	<summary>
 Text written to the Console by the external program (including carriage returns)
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.CachedConsoleError">
	<summary>
 Any text written to the Error buffer by the external program
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.CacheStandardOutput">
	<summary>
 When true then will cache the text the external program writes to the console
 Can retrieve using the CachedConsoleOutput readonly property
 Will also fire event ConsoleOutputEvent as new text is written to the console
 </summary>
	<remarks>If this is true, then no window will be shown, even if CreateNoWindow=False</remarks>
</member><member name="P:PRISM.Processes.clsProgRunner.ConsoleOutputFilePath">
	<summary>
 File path to which the console output will be written if WriteConsoleOutputToFile is true
 If blank, then file path will be auto-defined in the WorkDir  when program execution starts
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:PRISM.Processes.clsProgRunner.CreateNoWindow">
	<summary>
 Determine if window should be displayed.
 Will be forced to True if CacheStandardOutput = True
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.EchoOutputToConsole">
	<summary>
 When true, then echoes, in real time, text written to the Console by the external program 
 Ignored if CreateNoWindow = False
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.ExitCode">
	<summary>
 Exit code when process completes.
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.MonitoringInterval">
	<summary>
 How often (milliseconds) internal monitoring thread checks status of external program
 Minimum allowed value is 50 milliseconds
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.Name">
	<summary>
 Name of this progrunner.
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.NotifyOnEvent">
	<summary>Gets or Sets notify on event.</summary>
</member><member name="P:PRISM.Processes.clsProgRunner.NotifyOnException">
	<summary>Gets or Sets notify on exception.</summary>
</member><member name="P:PRISM.Processes.clsProgRunner.PID">
	<summary>
 Process id of currently running external program's process.
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.Program">
	<summary>
 External program that prog runner will run.
 This is the full path to the program file
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.Repeat">
	<summary>
 Whether prog runner will restart external program after it exits.
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.RepeatHoldOffTime">
	<summary>
 Time (seconds) that prog runner waits to restart external program after it exits.
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.State">
	<summary>
 Current state of prog runner (as number).
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.StateName">
	<summary>
 Current state of prog runner (as descriptive name).
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.WindowStyle">
	<summary>
 Window style to use when CreateNoWindow is False.
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.WorkDir">
	<summary>
 Working directory for process execution.
 Not necessarily the same as the directory that contains the program we're running.
 </summary>
</member><member name="P:PRISM.Processes.clsProgRunner.WriteConsoleOutputToFile">
	<summary>
 When true then will write the standard output to a file in real-time
 Will also fire event ConsoleOutputEvent as new text is written to the console
 Define the path to the file using property ConsoleOutputFilePath; if not defined, the file will be created in the WorkDir
 </summary>
	<remarks>If this is true, then no window will be shown, even if CreateNoWindow=False</remarks>
</member><member name="M:PRISM.Processes.clsProgRunner.#ctor">
	<summary>
 Initializes a new instance of the clsProgRunner class.
 </summary>
</member><member name="M:PRISM.Processes.clsProgRunner.ClearCachedConsoleOutput">
	<summary>
 Clears any console output text that is currently cached
 </summary>
	<remarks></remarks>
</member><member name="M:PRISM.Processes.clsProgRunner.ClearCachedConsoleError">
	<summary>
 Clears any console error text that is currently cached
 </summary>
	<remarks></remarks>
</member><member name="M:PRISM.Processes.clsProgRunner.ConsoleOutputHandler(System.Object,System.Diagnostics.DataReceivedEventArgs)">
	<summary>
 Asynchronously handles the console output from the process running by m_Process
 </summary>
</member><member name="M:PRISM.Processes.clsProgRunner.HandleOutputStreams(System.IO.StreamReader@)">
	<summary>
 Handles any new data in the console output and console error streams
 </summary>
</member><member name="M:PRISM.Processes.clsProgRunner.RegisterExceptionLogger(PRISM.Logging.ILogger)">
	<summary>Sets the name of the exception logger</summary>
</member><member name="M:PRISM.Processes.clsProgRunner.RegisterEventLogger(PRISM.Logging.ILogger)">
	<summary>Sets the name of the event logger</summary>
</member><member name="M:PRISM.Processes.clsProgRunner.Start">
	<summary>
 Start program as external process and monitor its state.
 </summary>
</member><member name="M:PRISM.Processes.clsProgRunner.StartAndMonitorProgram">
	<summary>
 Creates a new thread and starts code that runs and monitors a program in it.
 </summary>
</member><member name="M:PRISM.Processes.clsProgRunner.StopMonitoringProgram(System.Boolean)">
	<summary>
 Causes monitoring thread to exit on its next monitoring cycle.
 </summary>
</member><member name="T:PRISM.Processes.clsProgRunner">
	<summary>
 This class runs a single program as an external process and monitors it with an internal thread.
 </summary>
</member><member name="E:PRISM.Files.DirectoryScanner.FoundFile">
	<summary>Event is raised whenever a matching file is found.</summary>
	<remarks>This event is most useful for implementing a progress indicator.</remarks>
	<param name="fileName">The found file's full path.</param>
</member><member name="M:PRISM.Files.DirectoryScanner.#ctor(System.String[])">
	<summary>Initializes a new instance of the DirectoryScanner class.</summary>
	<param name="dirs">An array of directory paths to scan.</param>
</member><member name="M:PRISM.Files.DirectoryScanner.PerformScan(System.Collections.ArrayList@,System.String[])">
	<summary>Performs a recursive search of a directory tree looking for file names that match a set of regular expressions.</summary>
	<param name="results">An array of file paths found.</param>
	<param name="searchPatterns">An array of regular expressions to use in the search.</param>
	<returns>Always return true.</returns>
</member><member name="T:PRISM.Files.DirectoryScanner">
	<summary>Performs a recursive search of a directory tree looking for file names that match a set of regular expressions.</summary>
</member><member name="M:PRISM.DataBase.clsExecuteDatabaseSP.#ctor(System.String)">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:PRISM.DataBase.clsExecuteDatabaseSP.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
	<summary>
 Event handler for InfoMessage event
 </summary>
	<param name="sender"></param>
	<param name="args"></param>
	<remarks>Errors and warnings from SQL Server are caught here</remarks>
</member><member name="M:PRISM.DataBase.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand)">
	<summary>
 Method for executing a db stored procedure, assuming no data table is returned; will retry the call to the procedure up to DEFAULT_SP_RETRY_COUNT=3 times
 </summary>
	<param name="SpCmd">SQL command object containing stored procedure params</param>
	<returns>Result code returned by SP; -1 if unable to execute SP</returns>
	<remarks></remarks>
</member><member name="M:PRISM.DataBase.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Int32)">
	<summary>
 Method for executing a db stored procedure, assuming no data table is returned
 </summary>
	<param name="SpCmd">SQL command object containing stored procedure params</param>
	<param name="MaxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
	<returns>Result code returned by SP; -1 if unable to execute SP</returns>
	<remarks></remarks>
</member><member name="M:PRISM.DataBase.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Int32,System.Int32)">
	<summary>
 Method for executing a db stored procedure, assuming no data table is returned
 </summary>
	<param name="SpCmd">SQL command object containing stored procedure params</param>
	<param name="MaxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
	<param name="RetryDelaySeconds">Number of seconds to wait between retrying the call to the procedure</param>
	<returns>Result code returned by SP; -1 if unable to execute SP</returns>
	<remarks></remarks>
</member><member name="M:PRISM.DataBase.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Data.DataTable@)">
	<summary>
 Method for executing a db stored procedure if a data table is to be returned; will retry the call to the procedure up to DEFAULT_SP_RETRY_COUNT=3 times
 </summary>
	<param name="SpCmd">SQL command object containing stored procedure params</param>
	<param name="OutTable">NOTHING when called; if SP successful, contains data table on return</param>
	<returns>Result code returned by SP; -1 if unable to execute SP</returns>
	<remarks></remarks>
</member><member name="M:PRISM.DataBase.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Data.DataTable@,System.Int32,System.Int32)">
	<summary>
 Method for executing a db stored procedure if a data table is to be returned
 </summary>
	<param name="SpCmd">SQL command object containing stored procedure params</param>
	<param name="OutTable">NOTHING when called; if SP successful, contains data table on return</param>
	<param name="MaxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
	<param name="RetryDelaySeconds">Number of seconds to wait between retrying the call to the procedure</param>
	<returns>Result code returned by SP; -1 if unable to execute SP</returns>
	<remarks></remarks>
</member><member name="T:PRISM.DataBase.clsExecuteDatabaseSP">
	<summary>Tools to execute a stored procedure</summary>
</member><member name="M:PRISM.Files.IniFileReader.#ctor(System.String,PRISM.Logging.ILogger@)">
	<summary>Initializes a new instance of the IniFileReader.</summary>
	<param name="IniFileName">The name of the ini file.</param>
	<param name="logger">This is the logger.</param>
</member><member name="M:PRISM.Files.IniFileReader.#ctor(System.String,System.Boolean)">
	<summary>Initializes a new instance of the IniFileReader.</summary>
	<param name="IniFileName">The name of the ini file.</param>
	<param name="IsCaseSensitive">Case sensitive as boolean.</param>
</member><member name="M:PRISM.Files.IniFileReader.#ctor(System.String,PRISM.Logging.ILogger@,System.Boolean)">
	<summary>Initializes a new instance of the IniFileReader.</summary>
	<param name="IniFileName">The name of the ini file.</param>
	<param name="logger">This is the logger.</param>
	<param name="IsCaseSensitive">Case sensitive as boolean.</param>
</member><member name="M:PRISM.Files.IniFileReader.#ctor(System.String)">
	<summary>Initializes a new instance of the IniFileReader.</summary>
	<param name="IniFileName">The name of the ini file.</param>
</member><member name="M:PRISM.Files.IniFileReader.InitIniFileReader(System.String,System.Boolean)">
	<summary>
 This routine is called by each of the constructors to make the actual assignments.
 </summary>
</member><member name="P:PRISM.Files.IniFileReader.IniFilename">
	<summary>
 This routine returns the name of the ini file.
 </summary>
	<return>The function returns the name of ini file.</return>
</member><member name="P:PRISM.Files.IniFileReader.Initialized">
	<summary>
 This routine returns a boolean showing if the file was initialized or not.
 </summary>
	<return>The function returns a Boolean.</return>
</member><member name="P:PRISM.Files.IniFileReader.CaseSensitive">
	<summary>
 This routine returns a boolean showing if the name is case sensitive or not.
 </summary>
	<return>The function returns a Boolean.</return>
</member><member name="M:PRISM.Files.IniFileReader.SetNameCase(System.String)">
	<summary>
 This routine sets a name.
 </summary>
	<param name="aName">The name to be set.</param>
	<return>The function returns a string.</return>
</member><member name="M:PRISM.Files.IniFileReader.GetRoot">
	<summary>
 TBD.
 </summary>
</member><member name="M:PRISM.Files.IniFileReader.GetLastSection">
	<summary>
 The function gets the last section.
 </summary>
	<return>The function returns the last section as XmlElement.</return>
</member><member name="M:PRISM.Files.IniFileReader.GetSection(System.String)">
	<summary>
 The function gets a section as XmlElement.
 </summary>
	<param name="sectionName">The name of a section.</param>
	<return>The function returns a section as XmlElement.</return>
</member><member name="M:PRISM.Files.IniFileReader.GetItem(System.String,System.String)">
	<summary>
 The function gets an item.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<return>The function returns a XML element.</return>
</member><member name="M:PRISM.Files.IniFileReader.SetIniSection(System.String,System.String)">
	<summary>
 The function sets the ini section name.
 </summary>
	<param name="oldSection">The name of the old ini section name.</param>
	<param name="newSection">The new name for the ini section.</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.IniFileReader.SetIniValue(System.String,System.String,System.String)">
	<summary>
 The function sets a new value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.IniFileReader.DeleteSection(System.String)">
	<summary>
 The function deletes a section in the file.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<return>The function returns a boolean that shows if the delete was completed.</return>
</member><member name="M:PRISM.Files.IniFileReader.DeleteItem(System.String,System.String)">
	<summary>
 The function deletes a item in a specific section.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<return>The function returns a boolean that shows if the delete was completed.</return>
</member><member name="M:PRISM.Files.IniFileReader.SetIniKey(System.String,System.String,System.String)">
	<summary>
 The function sets a new value for the "key" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "key".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.IniFileReader.GetIniValue(System.String,System.String)">
	<summary>
 The function gets the name of the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<return>The function returns the name of the "value" attribute.</return>
</member><member name="M:PRISM.Files.IniFileReader.GetIniComments(System.String)">
	<summary>
 The function gets the comments for a section name.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<return>The function returns a string collection with comments</return>
</member><member name="M:PRISM.Files.IniFileReader.SetIniComments(System.String,System.Collections.Specialized.StringCollection)">
	<summary>
 The function sets a the comments for a section name.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="comments">A string collection.</param>
	<return>The function returns a Boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.IniFileReader.UpdateSections">
	<summary>
 The subroutine updades the sections.
 </summary>
</member><member name="P:PRISM.Files.IniFileReader.AllSections">
	<summary>
 The subroutine gets the sections.
 </summary>
	<return>The subroutine returns a strin collection of sections.</return>
</member><member name="M:PRISM.Files.IniFileReader.GetItemsInSection(System.String,PRISM.Files.IniItemTypeEnum)">
	<summary>
 The function gets a collection of items for a section name.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="itemType">Item type.</param>
	<return>The function returns a string colection of items in a section.</return>
</member><member name="M:PRISM.Files.IniFileReader.AllKeysInSection(System.String)">
	<summary>The funtions gets a collection of keys in a section.</summary>
	<param name="sectionName">The name of the section.</param>
	<return>The function returns a string colection of all the keys in a section.</return>
</member><member name="M:PRISM.Files.IniFileReader.AllValuesInSection(System.String)">
	<summary>The funtions gets a collection of values in a section.</summary>
	<param name="sectionName">The name of the section.</param>
	<return>The function returns a string colection of all the values in a section.</return>
</member><member name="M:PRISM.Files.IniFileReader.AllItemsInSection(System.String)">
	<summary>The funtions gets a collection of items in a section.</summary>
	<param name="sectionName">The name of the section.</param>
	<return>The function returns a string colection of all the items in a section.</return>
</member><member name="M:PRISM.Files.IniFileReader.GetCustomIniAttribute(System.String,System.String,System.String)">
	<summary>The funtions gets a custom attribute name.</summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="attributeName">The name of the attribute.</param>
	<return>The function returns a string.</return>
</member><member name="M:PRISM.Files.IniFileReader.SetCustomIniAttribute(System.String,System.String,System.String,System.String)">
	<summary>The funtions sets a custom attribute name.</summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="attributeName">The name of the attribute.</param>
	<param name="attributeValue">The value of the attribute.</param>
	<return>The function returns a Boolean.</return>
</member><member name="M:PRISM.Files.IniFileReader.CreateSection(System.String)">
	<summary>The funtions creates a section name.</summary>
	<param name="sectionName">The name of the section to be created.</param>
	<return>The function returns a Boolean.</return>
</member><member name="M:PRISM.Files.IniFileReader.CreateItem(System.String,System.String,System.String)">
	<summary>The funtions creates a section name.</summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value to be created.</param>
	<return>The function returns a Boolean.</return>
</member><member name="M:PRISM.Files.IniFileReader.ParseLineXml(System.String,System.Xml.XmlDocument)">
	<summary>It parses a string and adds atribbutes to the XMLDocument.</summary>
	<param name="s">The name of the string to be parse.</param>
	<param name="doc">The name of the XmlDocument.</param>
</member><member name="P:PRISM.Files.IniFileReader.OutputFilename">
	<summary>It Sets or Gets the output file name.</summary>
</member><member name="M:PRISM.Files.IniFileReader.Save">
	<summary>It saves the data to the Xml output file.</summary>
</member><member name="P:PRISM.Files.IniFileReader.XmlDoc">
	<summary>It gets the XmlDocument.</summary>
</member><member name="P:PRISM.Files.IniFileReader.XML">
	<summary>Converts an XML document to a string.</summary>
	<return>It returns the XML document formatted as a string.</return>
</member><member name="M:PRISM.Files.IniFileReader.RegisterExceptionLogger(PRISM.Logging.ILogger)">
	<summary>Sets the name of the exception logger</summary>
</member><member name="M:PRISM.Files.IniFileReader.RegisterEventLogger(PRISM.Logging.ILogger)">
	<summary>Sets the name of the event logger</summary>
</member><member name="P:PRISM.Files.IniFileReader.NotifyOnEvent">
	<summary>Gets or Sets notify on event.</summary>
</member><member name="P:PRISM.Files.IniFileReader.NotifyOnException">
	<summary>Gets or Sets notify on exception.</summary>
</member><member name="T:PRISM.Files.IniFileReader">
	<summary>Tools to manipulates INI files.</summary>
</member><member name="P:PRISM.Files.FolderBrowser.BrowseFlags">
	<summary>TBD</summary>
</member><member name="P:PRISM.Files.FolderBrowser.FolderPath">
	<summary>TBD</summary>
</member><member name="P:PRISM.Files.FolderBrowser.Title">
	<summary>TBD</summary>
</member><member name="M:PRISM.Files.FolderBrowser.BrowseForFolder(System.String)">
	<summary>TBD</summary>
</member><member name="M:PRISM.Files.FolderBrowser.mFolderBrowserDialog_Initialized(System.Object,System.EventArgs)">
	<summary>TBD</summary>
</member><member name="M:PRISM.Files.FolderBrowser.#ctor">
	<summary>TBD</summary>
</member><member name="T:PRISM.Files.FolderBrowser">
	<summary>TBD</summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.ReturnOnlyFSDirs">
	<summary>
 Same as BIF_RETURNONLYFSDIRS 
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.DontGoBelowDomain">
	<summary>
 Same as BIF_DONTGOBELOWDOMAIN 
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.ShowStatusText">
	<summary>
 Same as BIF_STATUSTEXT 
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.ReturnFSancestors">
	<summary>
 Same as BIF_RETURNFSANCESTORS 
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.EditBox">
	<summary>
 Same as BIF_EDITBOX 
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.Validate">
	<summary>
 Same as BIF_VALIDATE 
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.NewDialogStyle">
	<summary>
 Same as BIF_NEWDIALOGSTYLE
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.BrowseIncludeURLs">
	<summary>
 Same as BIF_BROWSEINCLUDEURLS 
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.AddUsageHint">
	<summary>
 Same as BIF_UAHINT
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.NoNewFolderButton">
	<summary>
 Same as BIF_NONEWFOLDERBUTTON 
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.BrowseForComputer">
	<summary>
 Same as BIF_BROWSEFORCOMPUTER
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.BrowseForPrinter">
	<summary>
 Same as BIF_BROWSEFORPRINTER 
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.IncludeFiles">
	<summary>
 Same as BIF_BROWSEINCLUDEFILES 
 </summary>
</member><member name="F:PRISM.Files.Forms.BrowseFlags.ShowShareable">
	<summary>
 Same as BIF_SHAREABLE 
 </summary>
</member><member name="T:PRISM.Files.Forms.BrowseFlags">
	<summary>
 Flags that control display and behaviour of folder browse dialog
 </summary>
</member><member name="P:PRISM.Files.Forms.ShellFolderBrowser.Title">
	<summary>
 String that is displayed above the tree view control in the dialog box. 
 This string can be used to specify instructions to the user. 
 Can only be modified if the dalog is not currently displayed.
 </summary>
</member><member name="P:PRISM.Files.Forms.ShellFolderBrowser.FolderDisplayName">
	<summary>
 The display name of the folder selected by the user
 </summary>
</member><member name="P:PRISM.Files.Forms.ShellFolderBrowser.FolderPath">
	<summary>
 The folder path that was selected
 </summary>
</member><member name="P:PRISM.Files.Forms.ShellFolderBrowser.BrowseFlags">
	<summary>
 Sets the flags that control the behaviour of the dialog
 </summary>
</member><member name="M:PRISM.Files.Forms.ShellFolderBrowser.ShowDialog(System.Windows.Forms.IWin32Window)">
	<summary>
 Shows the dialog
 </summary>
	<param name="owner">The window to use as the owner</param>
</member><member name="M:PRISM.Files.Forms.ShellFolderBrowser.ShowDialog">
	<summary>
 Shows the dialog using active window as the owner
 </summary>
</member><member name="M:PRISM.Files.Forms.ShellFolderBrowser.SetStatusText(System.String)">
	<summary>
 Sets the text of the staus area of the folder dialog
 </summary>
	<param name="text">Text to set</param>
</member><member name="M:PRISM.Files.Forms.ShellFolderBrowser.EnableOkButton(System.Boolean)">
	<summary>
 Enables or disables the ok button
 </summary>
	<param name="bEnable">true to enable false to diasble the OK button</param>
</member><member name="M:PRISM.Files.Forms.ShellFolderBrowser.SetSelection(System.String)">
	<summary>
 Sets the selection the text specified
 </summary>
	<param name="newsel">The path of the folder which is to be selected</param>
</member><member name="M:PRISM.Files.Forms.ShellFolderBrowser.SetOkButtonText(System.String)">
	<summary>
 Sets the text of the OK button in the dialog
 </summary>
	<param name="text">New text of the OK button</param>
</member><member name="M:PRISM.Files.Forms.ShellFolderBrowser.SetExpanded(System.String)">
	<summary>
 Expand a path in the folder
 </summary>
	<param name="path">The path to expand</param>
</member><member name="E:PRISM.Files.Forms.ShellFolderBrowser.Initialized">
	<summary>
 Fired when the dialog is initialized
 </summary>
</member><member name="E:PRISM.Files.Forms.ShellFolderBrowser.SelChanged">
	<summary>
 Fired when selection changes
 </summary>
</member><member name="E:PRISM.Files.Forms.ShellFolderBrowser.IUnknownObtained">
	<summary>
 Shell provides an IUnknown through this event. For details see documentation of SHBrowseForFolder
 </summary>
</member><member name="E:PRISM.Files.Forms.ShellFolderBrowser.ValidateFailed">
	<summary>
 Fired when validation of text typed by user fails
 </summary>
</member><member name="T:PRISM.Files.Forms.ShellFolderBrowser">
	<summary>
 Encapsulates the shell folder browse dialog shown by SHBrowseForFolder
 </summary>
</member><member name="P:PRISM.Files.Forms.FolderSelChangedEventArgs.SelectedFolderPidl">
	<summary>
 Return ITEMIDLIST for the currently selected folder
 </summary>
</member><member name="P:PRISM.Files.Forms.FolderSelChangedEventArgs.SelectedFolderPath">
	<summary>
 Gets the path of the folder which is currently selected
 </summary>
</member><member name="P:PRISM.Files.Forms.IUnknownObtainedEventArgs.SiteUnknown">
	<summary>
 Object that corrensponds to the IUnknown obtained
 </summary>
</member><member name="T:PRISM.Files.Forms.IUnknownObtainedEventArgs">
	<summary>
 Provides data for the IUnknownObtainedEvent.
 </summary>
</member><member name="P:PRISM.Files.Forms.ValidateFailedEventArgs.InvalidText">
	<summary>
 The text which called validation to fail
 </summary>
</member><member name="P:PRISM.Files.Forms.ValidateFailedEventArgs.DismissDialog">
	<summary>
 Sets whether the dialog needs to be dismissed or not
 </summary>
</member><member name="T:PRISM.Files.Forms.ValidateFailedEventArgs">
	<summary>
 Provides data for validation failed event.
 </summary>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.LoadSettings">
	<summary>
 Loads the settings for the defined Xml Settings File.  Assumes names are not case sensitive
 </summary>
	<return>The function returns a boolean that shows if the file was successfully loaded.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.LoadSettings(System.String)">
	<summary>
 Loads the settings for the defined Xml Settings File.   Assumes names are not case sensitive
 </summary>
	<param name="XmlSettingsFilePath">The path to the XML settings file.</param>
	<return>The function returns a boolean that shows if the file was successfully loaded.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.LoadSettings(System.String,System.Boolean)">
	<summary>
 Loads the settings for the defined Xml Settings File
 </summary>
	<param name="XmlSettingsFilePath">The path to the XML settings file.</param>
	<param name="IsCaseSensitive">Case sensitive names if True. Non-case sensitive if false.</param>
	<return>The function returns a boolean that shows if the file was successfully loaded.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.LoadSettings(System.String,PRISM.Logging.ILogger@)">
	<summary>
 Loads the settings for the defined Xml Settings File.  Assumes names are not case sensitive
 </summary>
	<param name="XmlSettingsFilePath">The path to the XML settings file.</param>
	<param name="logger">This is the logger.</param>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.LoadSettings(System.String,PRISM.Logging.ILogger@,System.Boolean)">
	<summary>
 Loads the settings for the defined Xml Settings File
 </summary>
	<param name="XmlSettingsFilePath">The path to the XML settings file.</param>
	<param name="logger">This is the logger.</param>
	<param name="IsCaseSensitive">Case sensitive names if True.  Non-case sensitive if false.</param>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.SaveSettings">
	<summary>
 Saves the settings for the defined Xml Settings File.  Note that you must call LoadSettings to initialize the class prior to setting any values.
 </summary>
	<return>The function returns a boolean that shows if the file was successfully saved.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.SectionPresent(System.String)">
	<summary>Checks if a section is present in the settings file.</summary>
	<param name="sectionName">The name of the section to look for.</param>
	<return>The function returns a boolean that shows if the section is present.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.String,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as a String.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Boolean,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns boolean True if the "value" attribute is "true".  Otherwise, returns boolean False.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int16,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as a Short.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int32,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as an Integer.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int64,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as a Long.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Single,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as a Single.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Double,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as a Double.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.SetIniFilePath(System.String)">
	<summary>
 The function sets the path to the Xml Settings File.
 </summary>
	<param name="XmlSettingsFilePath">The path to the XML settings file.</param>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.String)">
	<summary>
 The function sets a new String value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Boolean)">
	<summary>
 The function sets a new Boolean value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int16)">
	<summary>
 The function sets a new Short value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int32)">
	<summary>
 The function sets a new Integer value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int64)">
	<summary>
 The function sets a new Long value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Single)">
	<summary>
 The function sets a new Single value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Double)">
	<summary>
 The function sets a new Double value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.RenameSection(System.String,System.String)">
	<summary>
 The function renames a section.
 </summary>
	<param name="sectionNameOld">The name of the old ini section name.</param>
	<param name="sectionNameNew">The new name for the ini section.</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.RegisterExceptionLogger(PRISM.Logging.ILogger)">
	<summary>Sets the name of the exception logger</summary>
</member><member name="M:PRISM.Files.XmlSettingsFileAccessor.RegisterEventLogger(PRISM.Logging.ILogger)">
	<summary>Sets the name of the event logger</summary>
</member><member name="P:PRISM.Files.XmlSettingsFileAccessor.NotifyOnEvent">
	<summary>Gets or Sets notify on event.</summary>
</member><member name="P:PRISM.Files.XmlSettingsFileAccessor.NotifyOnException">
	<summary>Gets or Sets notify on exception.</summary>
</member><member name="T:PRISM.Files.Forms.UnManagedMethods">
	<summary>
 A class that defines all the unmanaged methods used in the assembly
 </summary>
</member><member name="T:PRISM.Files.ShareConnector.NETRESOURCE">
	<summary>This structure is used to group a bunch of member variables.</summary>
</member><member name="F:PRISM.Files.ShareConnector.RESOURCE_CONNECTED">
	<summary> Constant that may be used by NETRESOURCE-&gt;dwScope </summary>
</member><member name="F:PRISM.Files.ShareConnector.RESOURCE_GLOBALNET">
	<summary> Constant that may be used by NETRESOURCE-&gt;dwScope </summary>
</member><member name="F:PRISM.Files.ShareConnector.RESOURCETYPE_DISK">
	<summary> Constant that may be used by NETRESOURCE-&gt;dwType </summary>
</member><member name="F:PRISM.Files.ShareConnector.RESOURCETYPE_PRINT">
	<summary> Constant that may be used by NETRESOURCE-&gt;dwType </summary>
</member><member name="F:PRISM.Files.ShareConnector.RESOURCETYPE_ANY">
	<summary> Constant that may be used by NETRESOURCE-&gt;dwType </summary>
</member><member name="F:PRISM.Files.ShareConnector.RESOURCEDISPLAYTYPE_DOMAIN">
	<summary> Constant that may be used by NETRESOURCE-&gt;dwDisplayType </summary>
</member><member name="F:PRISM.Files.ShareConnector.RESOURCEDISPLAYTYPE_GENERIC">
	<summary> Constant that may be used by NETRESOURCE-&gt;dwDisplayType </summary>
</member><member name="F:PRISM.Files.ShareConnector.RESOURCEDISPLAYTYPE_SERVER">
	<summary> Constant that may be used by NETRESOURCE-&gt;dwDisplayType </summary>
</member><member name="F:PRISM.Files.ShareConnector.RESOURCEDISPLAYTYPE_SHARE">
	<summary> Constant that may be used by NETRESOURCE-&gt;dwDisplayType </summary>
</member><member name="F:PRISM.Files.ShareConnector.RESOURCEUSAGE_CONNECTABLE">
	<summary> Constant that may be used by NETRESOURCE-&gt;dwDisplayType </summary>
</member><member name="F:PRISM.Files.ShareConnector.RESOURCEUSAGE_CONTAINER">
	<summary> Constant that may be used by NETRESOURCE-&gt;dwUsage </summary>
</member><member name="M:PRISM.Files.ShareConnector.#ctor(System.String,System.String)">
	<summary>
 This version of the constructor requires you to specify the sharename by setting the <see cref="P:PRISM.Files.ShareConnector.Share">Share</see> property.
 </summary>
</member><member name="M:PRISM.Files.ShareConnector.#ctor(System.String,System.String,System.String)">
	<summary>
 This version of the constructor allows you to specify the sharename as an  argument.
 </summary>
</member><member name="M:PRISM.Files.ShareConnector.RealNew(System.String,System.String)">
	<summary>
 This routine is called by each of the constructors to make the actual assignments in a consistent fashion.
 </summary>
</member><member name="P:PRISM.Files.ShareConnector.Share">
	<summary>
 Sets the name of the file share to which you will connect.
 </summary>
</member><member name="M:PRISM.Files.ShareConnector.Connect(System.String)">
	<summary>
 Connects to specified share using account/password specified through the constructor and 
 the file share name passed as an argument.
 </summary>
	<param name="Share">The name of the file share to which you will connect.</param>
</member><member name="M:PRISM.Files.ShareConnector.Connect">
	<summary>
 Connects to specified share using account/password specified through the constructor.
 Requires you to have specifyed the sharename by setting the <see cref="P:PRISM.Files.ShareConnector.Share">Share</see> property.
 </summary>
</member><member name="M:PRISM.Files.ShareConnector.RealConnect">
	<summary>
 Connects to specified share using account/password specified previously.
 This is the function that actually does the connection based on the setup 
 from the <see cref="M:PRISM.Files.ShareConnector.Connect(System.String)">Connect</see> functions.
 </summary>
</member><member name="M:PRISM.Files.ShareConnector.Disconnect">
	<summary>
 Disconnects the files share.
 </summary>
</member><member name="P:PRISM.Files.ShareConnector.ErrorMessage">
	<summary>
 Gets the error message returned by the <see cref="M:PRISM.Files.ShareConnector.Connect(System.String)">Connect</see> and <see cref="M:PRISM.Files.ShareConnector.Disconnect">Disconnect</see> functions.
 </summary>
</member><member name="T:PRISM.Files.ShareConnector">
	<summary>Connects to a file share using a password and user name.
 </summary>
	<remarks>
 The default behaviour when connecting to SMB/CIFS file shares is for
 the system to supply the user name and password used to logon to the local machine.
 This class allows you to connect to SMB/CIFS file shares when the use of
 SSPI isn't availabe and/or when you don't wish to use the default behaviour.
 It's quite comparable to the "Connect using a different user name." option in the Map Network Drive
 utility in Windows.  Much of this code came from Microsoft Knowledge Base Article - 173011.  It was
 then modified to fit our needs.
 </remarks>
</member><member name="E:PRISM.Files.clsFileTools.CopyingFile">
	<summary>Event is raised before copying begins.</summary>
	<param name="filename">The file's full path.</param>
</member><member name="E:PRISM.Files.clsFileTools.ResumingFileCopy">
	<summary>Event is raised before copying begins.</summary>
	<param name="filename">The file's full path.</param>
</member><member name="E:PRISM.Files.clsFileTools.FileCopyProgress">
	<summary>Event is raised before copying begins.</summary>
	<param name="filename">The file name (not full path)</param>
	<param name="percentComplete">Percent complete (value between 0 and 100)</param>
</member><member name="F:PRISM.Files.clsFileTools.TERMINATOR_ADD">
	<summary>Used to add the path seperation character to the end of the directory path.</summary>
</member><member name="F:PRISM.Files.clsFileTools.TERMINATOR_REMOVE">
	<summary>Used to remove the path seperation character from the end of the directory path.</summary>
</member><member name="F:PRISM.Files.clsFileTools.DEFAULT_CHUNK_SIZE_MB">
	<summary>
 Used by CopyFileWithResume and CopyDirectoryWithResume when copying a file byte-by-byte and supporting resuming the copy if interrupted
 </summary>
	<remarks></remarks>
</member><member name="F:PRISM.Files.clsFileTools.DEFAULT_FLUSH_THRESHOLD_MB">
	<summary>
 Used by CopyFileWithResume; defines how often the data is flushed out to disk; must be larger than the ChunkSize
 </summary>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.CheckTerminator(System.String,System.Boolean,System.String)">
	<summary>Modifies input directory path string depending on optional settings.</summary>
	<param name="InpFolder">The input directory path.</param>
	<param name="AddTerm">Specifies whether the directory path string ends with the specified directory seperation character.</param>
	<param name="TermChar">The specified directory seperation character.</param>
	<returns>The modified directory path.</returns>
</member><member name="M:PRISM.Files.clsFileTools.CheckTerminator(System.String,System.Boolean)">
	<summary>Adds or removes the DOS path seperation character from the end of the directory path.</summary>
	<param name="InpFolder">The input directory path.</param>
	<param name="AddTerm">Specifies whether the directory path string ends with the specified directory seperation character.</param>
	<returns>The modified directory path.</returns>
</member><member name="M:PRISM.Files.clsFileTools.CheckTerminator(System.String,System.String)">
	<summary>Assures the directory path ends with the specified path seperation character.</summary>
	<param name="InpFolder">The input directory path.</param>
	<param name="TermChar">The specified directory seperation character.</param>
	<returns>The modified directory path.</returns>
</member><member name="M:PRISM.Files.clsFileTools.CheckTerminator(System.String)">
	<summary>Assures the directory path ends with the DOS path seperation character.</summary>
	<param name="InpFolder">The input directory path.</param>
	<returns>The modified directory path.</returns>
</member><member name="M:PRISM.Files.clsFileTools.CheckTerminatorEX(System.String,System.Boolean,System.String)">
	<summary>Modifies input directory path string depending on optional settings.</summary>
	<param name="InpFolder">The input directory path.</param>
	<param name="AddTerm">Specifies whether the directory path string ends with the specified directory seperation character.</param>
	<param name="TermChar">The specified directory seperation character.</param>
	<returns>The modified directory path.</returns>
</member><member name="M:PRISM.Files.clsFileTools.CopyFile(System.String,System.String)">
	<summary>Copies a source file to the destination file. Does not allow overwriting.</summary>
	<param name="SourcePath">The source file path.</param>
	<param name="DestPath">The destination file path.</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyFile(System.String,System.String,System.Boolean)">
	<summary>Copies a source file to the destination file. Allows overwriting.</summary>
	<param name="SourcePath">The source file path.</param>
	<param name="DestPath">The destination file path.</param>
	<param name="Overwrite">True if the destination file can be overwritten; otherwise, false.</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyFileEx(System.String,System.String,System.Boolean)">
	<summary>Copies a source file to the destination file. Allows overwriting.</summary>
	<remarks>
 This function is unique in that it allows you to specify a destination path where
 some of the directories do not already exist.  It will create them if they don't.
 The last parameter specifies whether a file already present in the
 destination directory will be overwritten
 - Note: requires Imports System.IO
 - Usage: CopyFile("C:\Misc\Bob.txt", "D:\MiscBackup\Bob.txt")
 </remarks>
	<param name="SourcePath">The source file path.</param>
	<param name="DestPath">The destination file path.</param>
	<param name="Overwrite">True if the destination file can be overwritten; otherwise, false.</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyFileUsingLocks(System.String,System.String,System.IO.FileInfo,System.String,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="strLockFolderPathSource">Path to the lock folder for the source file; can be an empty string</param>
	<param name="strLockFolderPathTarget">Path to the lock folder for the target file; can be an empty string</param>
	<param name="fiSource"></param>
	<param name="strTargetFilePath"></param>
	<param name="strManagerName"></param>
	<param name="Overwrite"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.CreateLockFile(System.IO.DirectoryInfo,System.Int64,System.IO.FileInfo,System.String,System.String)">
	<summary>
 Create a lock file in the specified lock folder
 </summary>
	<param name="diLockFolder"></param>
	<param name="fiSource"></param>
	<param name="strTargetFilePath"></param>
	<param name="strManagerName"></param>
	<returns>Full path to the lock file; empty string if an error or if diLockFolder is null</returns>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.FindLockFiles(System.IO.DirectoryInfo,System.Int64)">
	<summary>
 Finds lock files with a timestamp less than
 </summary>
	<param name="diLockFolder"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.GenerateLockFileName(System.Int64,System.IO.FileInfo,System.String)">
	<summary>
 Generate the lock file name, which starts with a msec-based timestamp, then has the source file size (in MB), then has information on the machine creating the file
 </summary>
	<param name="fiSource"></param>
	<param name="strManagerName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.GetServerShareBase(System.String)">
	<summary>
 Returns the first portion of a network share path, for example \\MyServer is returned for \\MyServer\Share\Filename.txt
 </summary>
	<param name="strServerSharePath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String)">
	<summary>Copies a source directory to the destination directory. Does not allow overwriting.</summary>
	<param name="SourcePath">The source directory path.</param>
	<param name="DestPath">The destination directory path.</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String,System.String)">
	<summary>Copies a source directory to the destination directory. Does not allow overwriting.</summary>
	<param name="SourcePath">The source directory path.</param>
	<param name="DestPath">The destination directory path.</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String,System.Collections.Generic.List{System.String})">
	<summary>Copies a source directory to the destination directory. Does not allow overwriting.</summary>
	<param name="SourcePath">The source directory path.</param>
	<param name="DestPath">The destination directory path.</param>
	<param name="FileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean)">
	<summary>Copies a source directory to the destination directory. Allows overwriting.</summary>
	<param name="SourcePath">The source directory path.</param>
	<param name="DestPath">The destination directory path.</param>
	<param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.String)">
	<summary>Copies a source directory to the destination directory. Allows overwriting.</summary>
	<param name="SourcePath">The source directory path.</param>
	<param name="DestPath">The destination directory path.</param>
	<param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String})">
	<summary>Copies a source directory to the destination directory. Allows overwriting.</summary>
	<param name="SourcePath">The source directory path.</param>
	<param name="DestPath">The destination directory path.</param>
	<param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param>
	<param name="FileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean)">
	<summary>Copies a source directory to the destination directory. Allows overwriting.</summary>
	<param name="SourcePath">The source directory path.</param>
	<param name="DestPath">The destination directory path.</param>
	<param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param>
	<param name="bReadOnly">The value to be assigned to the read-only attribute of the destination file.</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
	<summary>Copies a source directory to the destination directory. Allows overwriting.</summary>
	<param name="SourcePath">The source directory path.</param>
	<param name="DestPath">The destination directory path.</param>
	<param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param>
	<param name="bReadOnly">The value to be assigned to the read-only attribute of the destination file.</param>
	<param name="FileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.String)">
	<summary>Copies a source directory to the destination directory. Allows overwriting.</summary>
	<param name="SourcePath">The source directory path.</param>
	<param name="DestPath">The destination directory path.</param>
	<param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param>
	<param name="bReadOnly">The value to be assigned to the read-only attribute of the destination file.</param>
	<param name="FileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectoryEx(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String}@,System.String)">
	<summary>Copies a source directory to the destination directory. Allows overwriting.</summary>
	<remarks>Usage: CopyDirectory("C:\Misc", "D:\MiscBackup")
 Original code obtained from vb2themax.com
 </remarks>
	<param name="SourcePath">The source directory path.</param>
	<param name="DestPath">The destination directory path.</param>
	<param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param>
	<param name="SetAttribute">true if the read-only attribute of the destination file is to be modified, false otherwise.</param>
	<param name="bReadOnly">The value to be assigned to the read-only attribute of the destination file.</param>
	<param name="FileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
	<param name="strManagerName">Name of the calling program; used when calling CopyFileUsingLocks</param>
</member><member name="M:PRISM.Files.clsFileTools.UpdateReadonlyAttribute(System.IO.FileInfo,System.String,System.Boolean)">
	<summary>
 Copies the file attributes from a source file to a target file, explicitly updating the read-only bit based on bReadOnly
 </summary>
	<param name="fiSourceFile">Source FileInfo</param>
	<param name="sTargetFilePath">Target file path</param>
	<param name="bReadOnly">True to force the ReadOnly bit on, False to force it off</param>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectoryWithResume(System.String,System.String)">
	<summary>
 Copies a source directory to the destination directory.
 Overwrites existing files if they differ in modification time or size.
 Copies large files in chunks and allows resuming copying a large file if interrupted.
 </summary>
	<param name="SourceFolderPath">The source directory path.</param>
	<param name="TargetFolderPath">The destination directory path.</param>
	<returns>True if success; false if an error</returns>
	<remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean)">
	<summary>
 Copies a source directory to the destination directory.
 Overwrites existing files if they differ in modification time or size.
 Copies large files in chunks and allows resuming copying a large file if interrupted.
 </summary>
	<param name="SourceFolderPath">The source directory path.</param>
	<param name="TargetFolderPath">The destination directory path.</param>
	<param name="Recurse">True to copy subdirectories</param>
	<returns>True if success; false if an error</returns>
	<remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.Files.clsFileTools.FileOverwriteMode,System.Collections.Generic.List{System.String})">
	<summary>
 Copies a source directory to the destination directory. 
 Overwrite behavior is governed by eFileOverwriteMode
 Copies large files in chunks and allows resuming copying a large file if interrupted.
 </summary>
	<param name="SourceFolderPath">The source directory path.</param>
	<param name="TargetFolderPath">The destination directory path.</param>
	<param name="Recurse">True to copy subdirectories</param>
	<param name="eFileOverwriteMode">Behavior when a file already exists at the destination</param>
	<param name="FileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
	<returns>True if success; false if an error</returns>
	<remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.Files.clsFileTools.FileOverwriteMode,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
 Copies a source directory to the destination directory. 
 Overwrite behavior is governed by eFileOverwriteMode
 Copies large files in chunks and allows resuming copying a large file if interrupted.
 </summary>
	<param name="SourceFolderPath">The source directory path.</param>
	<param name="TargetFolderPath">The destination directory path.</param>
	<param name="Recurse">True to copy subdirectories</param>
	<param name="eFileOverwriteMode">Behavior when a file already exists at the destination</param>
	<param name="FileCountSkipped">Number of files skipped (output)</param>
	<param name="FileCountResumed">Number of files resumed (output)</param>
	<param name="FileCountNewlyCopied">Number of files newly copied (output)</param>
	<returns>True if success; false if an error</returns>
	<remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.Files.clsFileTools.FileOverwriteMode,System.Collections.Generic.List{System.String},System.Int32@,System.Int32@,System.Int32@)">
	<summary>
 Copies a source directory to the destination directory. 
 Overwrite behavior is governed by eFileOverwriteMode
 Copies large files in chunks and allows resuming copying a large file if interrupted.
 </summary>
	<param name="SourceFolderPath">The source directory path.</param>
	<param name="TargetFolderPath">The destination directory path.</param>
	<param name="Recurse">True to copy subdirectories</param>
	<param name="eFileOverwriteMode">Behavior when a file already exists at the destination</param>
	<param name="FileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
	<param name="FileCountSkipped">Number of files skipped (output)</param>
	<param name="FileCountResumed">Number of files resumed (output)</param>
	<param name="FileCountNewlyCopied">Number of files newly copied (output)</param>
	<returns>True if success; false if an error</returns>
	<remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
</member><member name="M:PRISM.Files.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.Files.clsFileTools.FileOverwriteMode,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.Int32@,System.Int32@,System.Int32@)">
	<summary>
 Copies a source directory to the destination directory. 
 Overwrite behavior is governed by eFileOverwriteMode
 Copies large files in chunks and allows resuming copying a large file if interrupted.
 </summary>
	<param name="SourceFolderPath">The source directory path.</param>
	<param name="TargetFolderPath">The destination directory path.</param>
	<param name="Recurse">True to copy subdirectories</param>
	<param name="eFileOverwriteMode">Behavior when a file already exists at the destination</param>
	<param name="SetAttribute">True if the read-only attribute of the destination file is to be modified, false otherwise.</param>
	<param name="bReadOnly">The value to be assigned to the read-only attribute of the destination file.</param>
	<param name="FileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
	<param name="FileCountSkipped">Number of files skipped (output)</param>
	<param name="FileCountResumed">Number of files resumed (output)</param>
	<param name="FileCountNewlyCopied">Number of files newly copied (output)</param>
	<returns>True if success; false if an error</returns>
	<remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
</member><member name="M:PRISM.Files.clsFileTools.CopyFileWithResume(System.String,System.String,System.Boolean@)">
	<summary>
 Copy a file using 
 </summary>
	<param name="SourceFilePath"></param>
	<param name="strTargetFilePath"></param>
	<param name="blnResumed"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.CopyFileWithResume(System.IO.FileInfo,System.String,System.Boolean@)">
	<summary>
 Copy fiSourceFile to diTargetFolder
 </summary>
	<param name="fiSourceFile"></param>
	<param name="strTargetFilePath"></param>
	<param name="blnResumed">Output parameter; true if copying was resumed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.NearlyEqualFileTimes(System.DateTime,System.DateTime)">
	<summary>
 Compares two timestamps (typically the LastWriteTime for a file)
 If they agree within 2 seconds, then returns True, otherwise false
 </summary>
	<param name="dtTime1">First file time</param>
	<param name="dtTime2">Second file time</param>
	<returns>True if the times agree within 2 seconds</returns>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.GetDirectorySize(System.String)">
	<summary>Get the directory size.</summary>
	<param name="DirPath">The path to the directory.</param>
	<returns>The directory size.</returns>
</member><member name="M:PRISM.Files.clsFileTools.GetDirectorySize(System.String,System.Int64@,System.Int64@)">
	<summary>Get the directory size, file count, and directory count for the entire directory tree.</summary>
	<param name="DirPath">The path to the directory.</param>
	<param name="FileCount">The number of files in the entire directory tree.</param>
	<param name="SubDirCount">The number of directories in the entire directory tree.</param>
	<returns>The directory size.</returns>
</member><member name="M:PRISM.Files.clsFileTools.GetDirectorySizeEX(System.String,System.Int64@,System.Int64@)">
	<summary>Get the directory size, file count, and directory count for the entire directory tree.</summary>
	<param name="DirPath">The path to the directory.</param>
	<param name="FileCount">The number of files in the entire directory tree.</param>
	<param name="SubDirCount">The number of directories in the entire directory tree.</param>
	<returns>The directory size.</returns>
</member><member name="M:PRISM.Files.clsFileTools.ValidateFreeDiskSpace(System.String,System.Double,System.String@)">
	<summary>
 Confirms that the drive for the target output file has a minimum amount of free disk space
 </summary>
	<param name="outputFilePath">Path to output file; defines the drive or server share for which we will determine the disk space</param>
	<param name="minimumFreeSpaceMB">Minimum free disk space, in MB.  Will default to 150 MB if zero or negative</param>
	<param name="ErrorMessage">Output message if there is not enough free space (or if the path is invalid)</param>
	<returns>True if more than minimumFreeSpaceMB is available; otherwise false</returns>
	<remarks></remarks>
</member><member name="M:PRISM.Files.clsFileTools.ValidateFreeDiskSpace(System.String,System.Double,System.Double,System.String@)">
	<summary>
 Confirms that the drive for the target output file has a minimum amount of free disk space
 </summary>
	<param name="outputFilePath">Path to output file; defines the drive or server share for which we will determine the disk space</param>
	<param name="outputFileExpectedSizeMB">Expected size of the output file</param>
	<param name="minimumFreeSpaceMB">Minimum free disk space, in MB.  Will default to 150 MB if zero or negative.  Takes into account outputFileExpectedSizeMB</param>
	<param name="ErrorMessage">Output message if there is not enough free space (or if the path is invalid)</param>
	<returns>True if more than minimumFreeSpaceMB is available; otherwise false</returns>
	<remarks></remarks>
</member><member name="T:PRISM.Files.clsFileTools">
	<summary>Tools to manipulate paths and directories.</summary>
	<remarks>
 There is a set of functions to properly terminate directory paths.
 There is a set of functions to copy an entire directory tree.
 There is a set of functions to copy an entire directory tree and resume copying interrupted files.
 There is a set of functions to get the size of an entire directory tree, including the number of files and directories.
</remarks>
</member><member name="M:PRISM.Files.ZipTools.MakeZipFile(System.String,System.String,System.String)">
	<summary>Create a zip file.</summary>
	<param name="CmdOptions">The zip program command line arguments.</param>
	<param name="OutputFile">The file path of the output zip file.</param>
	<param name="InputSpec">The files and/or directorys to archive.</param>
</member><member name="M:PRISM.Files.ZipTools.UnzipFile(System.String,System.String,System.String)">
	<summary>Extract files from a zip file.</summary>
	<param name="CmdOptions">The zip program command line arguments.</param>
	<param name="InputFile">The file path of the zip file from which to extract files.</param>
	<param name="OutPath">The path where you want to put the extracted files.</param>
</member><member name="P:PRISM.Files.ZipTools.CreateNoWindow">
	<summary>Defines whether a window is displayed when calling the zipping program.</summary>
</member><member name="P:PRISM.Files.ZipTools.WindowStyle">
	<summary>
 Window style to use when CreateNoWindow is False.
 </summary>
</member><member name="P:PRISM.Files.ZipTools.WorkDir">
	<summary>The working directory for the zipping process.</summary>
</member><member name="P:PRISM.Files.ZipTools.ZipFilePath">
	<summary>The path to the zipping program.</summary>
</member><member name="M:PRISM.Files.ZipTools.#ctor(System.String,System.String)">
	<summary>Initializes a new instance of the ZipTools class.</summary>
	<param name="WorkDir">The working directory for the zipping process.</param>
	<param name="ZipFilePath">The path to the zipping program.</param>
</member><member name="M:PRISM.Files.ZipTools.VerifyParams">
	<summary>Verifies initial parameters have been set prior to performing operation.</summary>
</member><member name="M:PRISM.Files.ZipTools.VerifyZippedFile(System.String)">
	<summary>Verifies the integrity of a zip file.</summary>
	<param name="FilePath">The file path of the zip file to verify.</param>
</member><member name="M:PRISM.Files.ZipTools.RegisterExceptionLogger(PRISM.Logging.ILogger)">
	<summary>Sets the name of the exception logger</summary>
</member><member name="M:PRISM.Files.ZipTools.RegisterEventLogger(PRISM.Logging.ILogger)">
	<summary>Sets the name of the event logger</summary>
</member><member name="P:PRISM.Files.ZipTools.NotifyOnEvent">
	<summary>Gets or Sets notify on event.</summary>
</member><member name="P:PRISM.Files.ZipTools.NotifyOnException">
	<summary>Gets or Sets notify on exception.</summary>
</member><member name="T:PRISM.Files.ZipTools">
	<summary>Makes using a file archiving program easier.</summary>
	<remarks>There are a routines to create an archive, extract files from an existing archive,
 and to verify an existing archive.
 </remarks>
</member>
</members>
</doc>